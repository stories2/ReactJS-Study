{"version":3,"sources":["logo.svg","Movie.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Movie","console","log","this","props","react_default","a","createElement","MovieStateless","title","poster","genres","synopsis","Component","_ref","className","MoviePosterStateless","alt","map","genre","index","MovieGenreStateless","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","_ref2","_ref3","src","App","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","reason","state","greeting","_renderMovieView","movie","src_Movie_0","medium_cover_image","id","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b97c39e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport './Movie.css'\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\n\r\nclass Movie extends Component {\r\n\r\n    static propTypes = {\r\n        title: PropTypes.string.isRequired,\r\n        poster: PropTypes.string,\r\n        genres: PropTypes.array.isRequired,\r\n        synopsis: PropTypes.string.isRequired\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props)\r\n        // return (\r\n        //     <div>\r\n        //         <h1>Movie Title: {this.props.title}</h1>\r\n        //         {/* <MoviePoster poster={this.props.poster}></MoviePoster> */}\r\n        //         <MoviePosterStateless poster={this.props.poster}/>\r\n        //     </div>\r\n        // )\r\n        return (\r\n            <MovieStateless title={this.props.title} poster={this.props.poster} genres={this.props.genres} synopsis={this.props.synopsis} />\r\n        )\r\n    }\r\n}\r\n\r\nfunction MovieStateless({ title, poster, genres, synopsis }) {\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Columns\">\r\n                <MoviePosterStateless poster={poster} alt={title}/>\r\n            </div>\r\n            <div className=\"Movie__Columns\">\r\n                <h1>{title}</h1>\r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => {\r\n                        return (\r\n                            <MovieGenreStateless genre={genre} key={index} />\r\n                        )\r\n                    })}\r\n                </div>\r\n                <div className=\"Movie__Synopsis\">\r\n                    <LinesEllipsis\r\n                        text={synopsis}\r\n                        maxLine='3'\r\n                        ellipsis=' ...'\r\n                        trimRight\r\n                        basedOn='letters'\r\n                        />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction MovieGenreStateless({genre}) {\r\n    return (\r\n        <span className=\"Movie__Genre\">{genre}</span>\r\n    )\r\n}\r\n\r\nclass MoviePoster extends Component {\r\n\r\n    static propTypes = {\r\n        poster: PropTypes.string.isRequired\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <img className=\"Movie__Poster\" src={this.props.poster}></img>\r\n        )\r\n    }\r\n}\r\n\r\nfunction MoviePosterStateless({ poster, alt }) {\r\n    return (\r\n        <img className=\"Movie__Poster\" src={poster} alt={alt} title={alt} />\r\n    )\r\n}\r\n\r\nMoviePosterStateless.propTypes = {\r\n    poster: PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenreStateless.propTypes = {\r\n    genre: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Movie","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Movie from './Movie'\r\n\r\nclass App extends Component {\r\n\r\n  //Render: componentWillMount -> render -> componentDidMount\r\n\r\n  //Update: componentWillReceiveProps -> shouldComponentUpdate -> componentWillUpdate -> render -> componentDidUpdate\r\n\r\n  componentWillMount() {\r\n    // Load Data\r\n    console.log(\"componentWillMount\")\r\n  }\r\n\r\n  componentDidMount() {\r\n    // After Edit Data\r\n    console.log(\"componentDidMount\")\r\n\r\n    this._getMovies()\r\n  }\r\n\r\n  _getMovies = async () => {\r\n    const movies = await this._callApi()\r\n    this.setState({\r\n      movies: movies\r\n    })\r\n  }\r\n\r\n  _callApi = () => {\r\n\r\n    return fetch('https://yts.am/api/v2/list_movies.json')\r\n    .then(function(response) {\r\n      return response.json()\r\n    })\r\n    .then(json => {\r\n      console.log(\"json\", json)\r\n      return json.data.movies\r\n    }) \r\n    .catch(function(reason) {\r\n      console.log(\"err\", reason)\r\n    })\r\n  }\r\n\r\n  state = {\r\n    greeting: \"Hello\"\r\n  }\r\n\r\n  _renderMovieView = () => {\r\n    const movies = this.state.movies.map((movie, index) => {\r\n      return (\r\n        <Movie \r\n          title={movie.title} \r\n          poster={movie.medium_cover_image} \r\n          key={movie.id} \r\n          genres={movie.genres}\r\n          synopsis={movie.synopsis}\r\n        />\r\n      )\r\n    })\r\n\r\n    return movies\r\n  }\r\n\r\n  render() {\r\n    // Render Data\r\n    console.log(\"render\")\r\n\r\n    const { movies } = this.state\r\n\r\n    return (\r\n      <div className={movies ? \"App\" : \"App--loading\"}>\r\n        {movies ? this._renderMovieView() : 'Loading'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// App 컴포넌트를 index.html 의 root 라는 ID 를 가진 영역에 작성을 해라\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}